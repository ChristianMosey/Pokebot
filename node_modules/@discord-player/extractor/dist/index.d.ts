import * as stream from 'stream';
import { Readable } from 'stream';
import { BaseExtractor, SearchQueryType, ExtractorSearchContext, ExtractorInfo, Track } from 'discord-player';
import { Client } from 'genius-lyrics';
import { HTMLElement } from 'node-html-parser';

declare class SoundCloudExtractor extends BaseExtractor {
    static identifier: "com.discord-player.soundcloudextractor";
    validate(query: string, type?: SearchQueryType | null | undefined): Promise<boolean>;
    handle(query: string, context: ExtractorSearchContext): Promise<ExtractorInfo>;
    emptyResponse(): ExtractorInfo;
    stream(info: Track): Promise<stream.Readable>;
}

declare class YoutubeExtractor extends BaseExtractor {
    static identifier: "com.discord-player.ysaextractor";
    private _stream;
    private _spotify;
    activate(): Promise<void>;
    validate(query: string, type?: SearchQueryType | null | undefined): Promise<boolean>;
    handle(query: string, context: ExtractorSearchContext): Promise<ExtractorInfo>;
    private _makeYTSearch;
    emptyResponse(): ExtractorInfo;
    stream(info: Track): Promise<stream.Readable>;
    static validateURL(link: string): boolean;
    static validateId(id: string): boolean;
    static parseURL(link: string): string;
}

interface SpotifySong {
    type: 'track';
    name: string;
    uri: string;
    id: string;
    title: string;
    artists: {
        name: string;
        uri: string;
    }[];
    coverArt: {
        extractedColors: {
            colorDark: {
                hex: string;
            };
            colorLight: {
                hex: string;
            };
        };
        sources: {
            url: string;
            width: number;
            height: number;
        }[];
    };
    releaseDate: {
        isoString: string;
    };
    duration: number;
    maxDuration: number;
    isPlayable: boolean;
    isExplicit: boolean;
    audioPreview: {
        url: string;
        format: string;
    };
    hasVideo: boolean;
    relatedEntityUri: string;
}
interface SpotifyAlbum {
    type: 'album';
    name: string;
    uri: string;
    id: string;
    title: string;
    subtitle: string;
    coverArt: {
        extractedColors: {
            colorDark: {
                hex: string;
            };
        };
        sources: {
            height: number;
            width: number;
            url: string;
        }[];
    };
    releaseDate: string;
    duration: number;
    maxDuration: number;
    isPlayable: boolean;
    isExplicit: boolean;
    hasVideo: boolean;
    relatedEntityUri: string;
    trackList: {
        uri: string;
        uid: string;
        title: string;
        subtitle: string;
        isExplicit: boolean;
        duration: number;
        isPlayable: boolean;
        audioPreview: {
            format: string;
            url: string;
        };
    }[];
}
interface SpotifyPlaylist {
    type: 'playlist';
    name: string;
    uri: string;
    id: string;
    title: string;
    subtitle: string;
    coverArt: {
        extractedColors: {
            colorDark: {
                hex: string;
            };
        };
        sources: {
            height: number;
            width: number;
            url: string;
        }[];
    };
    releaseDate: string;
    duration: number;
    maxDuration: number;
    isPlayable: boolean;
    isExplicit: boolean;
    hasVideo: boolean;
    relatedEntityUri: string;
    trackList: {
        uri: string;
        uid: string;
        title: string;
        subtitle: string;
        isExplicit: boolean;
        duration: number;
        isPlayable: boolean;
        audioPreview: {
            format: string;
            url: string;
        };
    }[];
}

declare function lyricsExtractor(apiKey?: string, force?: boolean): {
    search: typeof search;
    client: Client;
};
declare function search(query: string): Promise<LyricsData | null>;
interface LyricsData {
    title: string;
    id: number;
    thumbnail: string;
    image: string;
    url: string;
    artist: {
        name: string;
        id: number;
        url: string;
        image: string;
    };
    lyrics: string;
}

declare class VimeoExtractor extends BaseExtractor {
    static identifier: "com.discord-player.vimeoextractor";
    validate(query: string, type?: SearchQueryType | null | undefined): Promise<boolean>;
    handle(query: string, context: ExtractorSearchContext): Promise<ExtractorInfo>;
    emptyResponse(): ExtractorInfo;
    stream(info: Track): Promise<stream.Readable>;
}

declare class ReverbnationExtractor extends BaseExtractor {
    static identifier: "com.discord-player.reverbnationextractor";
    validate(query: string, type?: SearchQueryType | null | undefined): Promise<boolean>;
    handle(query: string, context: ExtractorSearchContext): Promise<ExtractorInfo>;
    emptyResponse(): ExtractorInfo;
    stream(info: Track): Promise<stream.Readable>;
}

declare class AttachmentExtractor extends BaseExtractor {
    static identifier: "com.discord-player.attachmentextractor";
    validate(query: string, type?: SearchQueryType | null | undefined): Promise<boolean>;
    handle(query: string, context: ExtractorSearchContext): Promise<ExtractorInfo>;
    emptyResponse(): ExtractorInfo;
    stream(info: Track): Promise<stream.Readable>;
}

declare class AppleMusic {
    constructor();
    static getSongInfoFallback(res: HTMLElement, name: string, id: string, link: string): Promise<{
        id: string;
        duration: string;
        title: string;
        url: string;
        thumbnail: string;
        artist: {
            name: string;
        };
    } | null>;
    static getSongInfo(link: string): Promise<{
        id: any;
        duration: any;
        title: any;
        url: any;
        thumbnail: string;
        artist: {
            name: any;
        };
    } | null>;
    static getPlaylistInfo(link: string): Promise<{
        id: any;
        title: any;
        thumbnail: string;
        artist: {
            name: any;
        };
        url: any;
        tracks: any;
    } | null>;
    static getAlbumInfo(link: string): Promise<{
        id: any;
        title: any;
        thumbnail: string;
        artist: {
            name: any;
        };
        url: any;
        tracks: any;
    } | null>;
}

declare class Vimeo {
    constructor();
    /**
     * @typedef {Readable} Readable
     */
    /**
     * Downloads from vimeo
     * @param {number} id Vimeo video id
     * @returns {Promise<Readable>}
     */
    static download(id: number | string): Promise<Readable>;
    /**
     * Returns video info
     * @param {number} id Video id
     */
    static getInfo(id: number | string): Promise<VimeoInfo | null>;
}
interface VimeoInfo {
    id: number;
    duration: number;
    title: string;
    url: string;
    thumbnail: string;
    stream: string;
    author: {
        id: number;
        name: string;
        url: string;
        avatar: string;
    };
}

declare function downloadStream(url: string): Promise<Readable>;

type index_AppleMusic = AppleMusic;
declare const index_AppleMusic: typeof AppleMusic;
type index_Vimeo = Vimeo;
declare const index_Vimeo: typeof Vimeo;
type index_VimeoInfo = VimeoInfo;
declare const index_downloadStream: typeof downloadStream;
declare namespace index {
  export {
    index_AppleMusic as AppleMusic,
    index_Vimeo as Vimeo,
    index_VimeoInfo as VimeoInfo,
    index_downloadStream as downloadStream,
  };
}

declare const version: string;

export { AttachmentExtractor, index as Internal, LyricsData, ReverbnationExtractor, SoundCloudExtractor, SpotifyAlbum, SpotifyPlaylist, SpotifySong, VimeoExtractor, YoutubeExtractor as YouTubeExtractor, YoutubeExtractor, lyricsExtractor, version };
